dim(punctuations)
punctuations <- matrix(c(punctuations)[punctuations != ""],nrow = 80)
punctuations <- rbind(punctuations, rep('\n', 274))
#
# punctuations<- c(cbind(punctuations, rep('\n', 1110)))
result <- paste(punctuations, collapse = "")
cat(result)
# set up the libraries
library(knitr)
library(stringr)
knitr::opts_chunk$set(echo = TRUE)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Read in the text of Pride and Prejudice and remove the the front matter and end matter
pap <-
readLines("https://www.gutenberg.org/files/1342/1342-0.txt", encoding = "UTF-8")[168:14227]
# Extract all the punctuation in the text using regular expression
punctuations <- stringr::str_extract_all(pap, "[[:punct:]]{1}", simplify=TRUE)
# Check the dimension of <punctuations>
dim(punctuations)
# break the matrix in to readable dimension
punctuations <- matrix(c(punctuations)[punctuations != ""],nrow = 80)
punctuations <- rbind(punctuations, rep('\n', 274))
# print the matrix into output
result <- paste(punctuations, collapse = "")
cat(result)
# Check the dimension of <punctuations>
dim(punctuations)
# break the matrix in to readable dimension
punctuations <- matrix(c(punctuations)[punctuations != ""],nrow = 80)
punctuations <- rbind(punctuations, rep('\n', 274))
# print the matrix into output
result <- paste(punctuations, collapse = "")
cat(result)
library(data.table)
library(tidyverse)
library(dplyr)
library(plotly)
library(DT)
library(knitr)
# Initialize code chunk options
opts_chunk$set(
warning = FALSE,
message = FALSE,
eval=TRUE,
echo = TRUE,
cache = FALSE,
fig.width = 7,
fig.align = 'center',
fig.asp = 0.618,
out.width = "700px",
class.source = "code-r")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = TRUE)
library(dplyr)
data <- read.csv("./Levels_Fyi_Salary_Data.csv")
View(data)
library(dplyr)
data <- read.csv("./Levels_Fyi_Salary_Data.csv")
data <- data %>%  clean_names()
library(dplyr)
library(janitor)
data <- read.csv("./Levels_Fyi_Salary_Data.csv")
data <- data %>%  clean_names()
View(data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = TRUE)
p1_scatter <- data %>%
plot_ly(x = ~yearsofexperience, y = ~totalyearlycompensation,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~totalyearlycompensation,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(state, ":", sep=""),
paste(" Cases per 100k: ",
per100k, sep="") ,
paste(" Deaths per 100k: ",
deathsper100k, sep=""),
sep = "<br>")) %>%
layout(title = "Population-normalized COVID-19 deaths vs. population density",
yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "Population Density"),
hovermode = "compare")
# filter out "District of Columbia"
# cv_states_today_scatter <- cv_states_today %>% filter(state!="District of Columbia")
#
# p2_scatter <- cv_states_today_scatter %>%
#   plot_ly(x = ~pop_density, y = ~deathsper100k,
#           type = 'scatter', mode = 'markers', color = ~state,
#           size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),
#           hoverinfo = 'text',
#           text = ~paste( paste(state, ":", sep=""), paste(" Cases per 100k: ", per100k, sep="") , paste(" Deaths per 100k: ",
#                         deathsper100k, sep=""), sep = "<br>")) %>%
#   layout(title = "Population-normalized COVID-19 deaths vs. population density",
#                   yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "Population Density"),
#          hovermode = "compare")
p1_scatter
p1_scatter <- data %>%
plot_ly(x = ~yearsofexperience, y = ~totalyearlycompensation,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~totalyearlycompensation,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste(" Total yearly compensation: ",
totalyearlycompensation, sep=""),
sep = "<br>")) %>%
layout(title = "Population-normalized COVID-19 deaths vs. population density",
yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "Population Density"),
hovermode = "compare")
# filter out "District of Columbia"
# cv_states_today_scatter <- cv_states_today %>% filter(state!="District of Columbia")
#
# p2_scatter <- cv_states_today_scatter %>%
#   plot_ly(x = ~pop_density, y = ~deathsper100k,
#           type = 'scatter', mode = 'markers', color = ~state,
#           size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),
#           hoverinfo = 'text',
#           text = ~paste( paste(state, ":", sep=""), paste(" Cases per 100k: ", per100k, sep="") , paste(" Deaths per 100k: ",
#                         deathsper100k, sep=""), sep = "<br>")) %>%
#   layout(title = "Population-normalized COVID-19 deaths vs. population density",
#                   yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "Population Density"),
#          hovermode = "compare")
p1_scatter
summary_com <- data %>%
group_by(company) %>%
summarise(count = n(),
mean_salary = mean(totalyearlycompensation))
View(summary_com)
View(summary_com)
summary_com <- data %>%
group_by(company) %>%
summarise(count = n(),
mean_salary = mean(totalyearlycompensation),
mean_exp = mean(yearsofexperience),
mean_com = mean(yearsatcompany))
p1_scatter <- summary_com %>%
plot_ly(x = ~mean_com, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~mean_salary,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste(" Total yearly compensation: ",
totalyearlycompensation, sep=""),
sep = "<br>")) %>%
layout(title = "year of experience vs. total yearly compensation",
yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "year of experience"),
hovermode = "compare")
# filter out "District of Columbia"
# cv_states_today_scatter <- cv_states_today %>% filter(state!="District of Columbia")
#
# p2_scatter <- cv_states_today_scatter %>%
#   plot_ly(x = ~pop_density, y = ~deathsper100k,
#           type = 'scatter', mode = 'markers', color = ~state,
#           size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),
#           hoverinfo = 'text',
#           text = ~paste( paste(state, ":", sep=""), paste(" Cases per 100k: ", per100k, sep="") , paste(" Deaths per 100k: ",
#                         deathsper100k, sep=""), sep = "<br>")) %>%
#   layout(title = "Population-normalized COVID-19 deaths vs. population density",
#                   yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "Population Density"),
#          hovermode = "compare")
p1_scatter
p1_scatter
p1_scatter <- summary_com %>%
plot_ly(x = ~mean_com, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~mean_salary,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste(" Total yearly compensation: ",
mean_salary, sep=""),
sep = "<br>")) %>%
layout(title = "year of experience vs. total yearly compensation",
yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "year of experience"),
hovermode = "compare")
# filter out "District of Columbia"
# cv_states_today_scatter <- cv_states_today %>% filter(state!="District of Columbia")
#
# p2_scatter <- cv_states_today_scatter %>%
#   plot_ly(x = ~pop_density, y = ~deathsper100k,
#           type = 'scatter', mode = 'markers', color = ~state,
#           size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),
#           hoverinfo = 'text',
#           text = ~paste( paste(state, ":", sep=""), paste(" Cases per 100k: ", per100k, sep="") , paste(" Deaths per 100k: ",
#                         deathsper100k, sep=""), sep = "<br>")) %>%
#   layout(title = "Population-normalized COVID-19 deaths vs. population density",
#                   yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "Population Density"),
#          hovermode = "compare")
p1_scatter
summary_com <- data %>%
filter(title == "Data Scientist") %>%
group_by(company) %>%
summarise(count = n(),
mean_salary = mean(totalyearlycompensation),
mean_exp = mean(yearsofexperience),
mean_com = mean(yearsatcompany))
p1_scatter <- summary_com %>%
plot_ly(x = ~mean_com, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~mean_salary,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste(" Total yearly compensation: $",
mean_salary, sep=""),
sep = "<br>")) %>%
layout(title = "Year at company vs. Average total yearly compensation",
yaxis = list(title = "Average Total yearly compensation"), xaxis = list(title = "Year at company"),
hovermode = "compare")
p2_scatter <- summary_com %>%
plot_ly(x = ~mean_exp, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~mean_salary,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste("Average total yearly compensation: ", mean_salary, sep=""),
sep = "<br>")) %>%
layout(title = "Year of experience vs. Average total yearly compensation",
yaxis = list(title = "Average total yearly compensation"), xaxis = list(title = "Year of experience"),
hovermode = "compare")
p1_scatter
p2_scatter
library(data.table)
library(tidyverse)
library(plotly)
library(knitr)
library(widgetframe)
opts_chunk$set(
warning = FALSE,
message = FALSE,
eval=TRUE,
echo = TRUE,
cache=FALSE,
include=TRUE,
fig.width = 7,
fig.align = 'center',
fig.asp = 0.618,
out.width = "700px")
cv_states_readin <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv") )
state_pops <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/COVID19Tracking/associated-data/master/us_census_data/us_census_2018_population_estimates_states.csv"))
state_pops$abb <- state_pops$state
state_pops$state <- state_pops$state_name
state_pops$state_name <- NULL
cv_states <- merge(cv_states_readin, state_pops, by="state")
dim(cv_states)
head(cv_states)
tail(cv_states)
str(cv_states)
cv_states$date <- as.Date(cv_states$date, format="%Y-%m-%d")
state_list <- unique(cv_states$state)
cv_states$state <- factor(cv_states$state, levels = state_list)
abb_list <- unique(cv_states$abb)
cv_states$abb <- factor(cv_states$abb, levels = abb_list)
cv_states = cv_states[order(cv_states$state, cv_states$date),]
str(cv_states)
head(cv_states)
tail(cv_states)
head(cv_states)
summary(cv_states)
min(cv_states$date)
max(cv_states$date)
for (i in 1:length(state_list)) {
cv_subset = subset(cv_states, state == state_list[i])
cv_subset = cv_subset[order(cv_subset$date),]
# add starting level for new cases and deaths
cv_subset$new_cases = cv_subset$cases[1]
cv_subset$new_deaths = cv_subset$deaths[1]
for (j in 2:nrow(cv_subset)) {
cv_subset$new_cases[j] = cv_subset$cases[j] - cv_subset$cases[j-1]
cv_subset$new_deaths[j] = cv_subset$deaths[j] - cv_subset$deaths[j-1]
}
cv_states$new_cases[cv_states$state==state_list[i]] = cv_subset$new_cases
cv_states$new_deaths[cv_states$state==state_list[i]] = cv_subset$new_deaths
}
# Focus on recent dates
cv_states <- cv_states %>% dplyr::filter(date >= "2021-07-01")
p1<- ggplot(cv_states, aes(x=date, y=new_cases, col = state)) +
geom_line()
ggplotly(p1)
p2 <- ggplot(cv_states,
aes(x = date, y = new_deaths, colour = state)) +
geom_line()
ggplotly(p2)
cv_states$new_cases[cv_states$new_cases < 0] = 0
cv_states$new_deaths[cv_states$new_deaths < 0] = 0
p3 <- ggplot(cv_states,
aes(x = date, y = new_deaths, colour = state)) +
geom_line() +
geom_point(size = 0.5, alpha = 0.5)
ggplotly(p3)
cv_states$per100k =  as.numeric(format(round(cv_states$cases/(cv_states$population/100000),1),nsmall=1))
cv_states$newper100k =  as.numeric(format(round(cv_states$new_cases/(cv_states$population/100000),1),nsmall=1))
cv_states$deathsper100k =  as.numeric(format(round(cv_states$deaths/(cv_states$population/100000),1),nsmall=1))
cv_states$newdeathsper100k =  as.numeric(format(round(cv_states$new_deaths/(cv_states$population/100000),1),nsmall=1))
cv_states = cv_states %>% mutate(naive_CFR = round((deaths*100/cases),2))
max_date <- max(cv_states$date)
cv_states_today = cv_states %>% filter(date==as.Date(max_date))
cv_states_today %>%
plot_ly(x = ~pop_density,
y=~cases,
type = 'scatter',
mode = 'markers',
color = ~state,
size = ~population,
sizes = c(5, 70),
marker = list(sizemode='diameter',
opacity = 0.5))
cv_states_today %>%
filter(state != "District of Columbia") %>%
plot_ly(x=~pop_density,
y=~cases,
type = "scatter",
mode = "markers",
color = ~state,
size = ~population,
sizes = c(5, 70),
marker = list(sizemode='diameter',
opacity = 0.5))
cv_states_today %>%
filter(state != "District of Columbia") %>%
plot_ly(x=~pop_density,
y=~cases,
type = "scatter",
mode = "markers",
color = ~state,
size = ~population,
sizes = c(5, 70),
marker = list(sizemode='diameter',
opacity = 0.5),
hover_info = "text",
text = ~paste(paste0("State:", state),
paste0("Cases per 100k:", per100k),
paste0("Deaths per 100k:", deathsper100k),
sep = "<br>")) %>%
layout(title = "Population-normalized cases per 100k",
yaxis = list(title = "cases per 100k"),
xaxis = list(title = "population"),
hovermode = "compare")
p4 <- cv_states_today %>%
filter(state != "District of Columbia") %>%
ggplot(aes(x=pop_density,
y = deathsper100k,
color = state,
size = population)) +
geom_point()
ggplotly(p4)
cv_states %>%
plot_ly(x = ~date,
y = ~naive_CFR,
color = ~state,
type = "scatter",
mode = "lines")
cv_states %>%
filter(state == "Florida") %>%
plot_ly(x = ~date,
y = ~new_cases,
type = "scatter",
mode = "lines",
name = "cases") %>%
add_lines(x = ~date,
y = ~new_deaths,
type = "scatter",
mode = "lines",
name = "deaths")
p1_scatter <- summary_com %>%
plot_ly(x = ~mean_com, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~count,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste(" Total yearly compensation: $",
mean_salary, sep=""),
sep = "<br>")) %>%
layout(title = "Year at company vs. Average total yearly compensation",
yaxis = list(title = "Average Total yearly compensation"), xaxis = list(title = "Year at company"),
hovermode = "compare")
p2_scatter <- summary_com %>%
plot_ly(x = ~mean_exp, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~count,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste("Average total yearly compensation: ", mean_salary, sep=""),
sep = "<br>")) %>%
layout(title = "Year of experience vs. Average total yearly compensation",
yaxis = list(title = "Average total yearly compensation"), xaxis = list(title = "Year of experience"),
hovermode = "compare")
p3_lines <- cv_states %>%
filter(state == "Florida") %>%
plot_ly(x = ~date,
y = ~new_cases,
type = "scatter",
mode = "lines",
name = "cases") %>%
add_lines(x = ~date,
y = ~new_deaths,
type = "scatter",
mode = "lines",
name = "deaths")
p1_scatter
p2_scatter
summary_exp <- data %>%
filter(title== "Data Scientist") %>%
group_by(company, yearsofexperience) %>%
summarise(count = n(),
mean_salary = mean(totalyearlycompensation))
p1_scatter <- summary_com %>%
plot_ly(x = ~mean_com, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~count,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste(" Total yearly compensation: $",
mean_salary, sep=""),
sep = "<br>")) %>%
layout(title = "Year at company vs. Average total yearly compensation",
yaxis = list(title = "Average Total yearly compensation"), xaxis = list(title = "Year at company"),
hovermode = "compare")
p2_scatter <- summary_com %>%
plot_ly(x = ~mean_exp, y = ~mean_salary,
type = 'scatter',
mode = 'markers',
color = ~company,
size = ~count,
sizes = c(5, 70),
marker = list(sizemode='diameter', opacity=0.5),
hoverinfo = 'text',
text = ~paste( paste(company, ":", sep=""),
paste("Average total yearly compensation: ", mean_salary, sep=""),
sep = "<br>")) %>%
layout(title = "Year of experience vs. Average total yearly compensation",
yaxis = list(title = "Average total yearly compensation"), xaxis = list(title = "Year of experience"),
hovermode = "compare")
p3_lines <- summary_exp %>%
plot_ly(x = ~yearsofexperience,
y = ~mean_salary,
type = "scatter",
mode = "lines",
name = "cases")
p3_lines
p3_lines <- summary_exp %>%
plot_ly(x = ~yearsofexperience,
y = ~mean_salary,
color = ~company,
type = "scatter",
mode = "lines",
name = "cases")
p3_lines
p3_lines <- summary_exp %>%
plot_ly(x = ~yearsofexperience,
y = ~mean_salary,
color = ~company,
type = "scatter",
mode = "lines",
name = company)
p3_lines <- summary_exp %>%
plot_ly(x = ~yearsofexperience,
y = ~mean_salary,
color = ~company,
type = "scatter",
mode = "lines",
name = ~company)
p3_lines
summary_yr_com <- data %>%
filter(title== "Data Scientist") %>%
group_by(company, yearsatcompany) %>%
summarise(count = n(),
mean_salary = mean(totalyearlycompensation))
p4_lines <- summary_yr_com %>%
plot_ly(x = ~yearsatcompany,
y = ~mean_salary,
color = ~company,
type = "scatter",
mode = "lines",
name = ~company)
p4_lines
library(dplyr)
library(janitor)
library(plotly)
data <- read.csv("./Levels_Fyi_Salary_Data.csv")
data <- data %>%  clean_names()
knitr::opts_chunk$set(warning = FALSE, message = FALSE, eval = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, eval = TRUE)
